#!/usr/bin/env bash

#     ibur - Incremental Backups Using Rsync
#
# VERSION: 0.1
# DATE:    2012-08-23
# AUTHOR:  Viktor Qvarfordt, viktor.qvarfordt@gmail.com
# HOME:    git://github.com/c3l/ibur.git
# USAGE:
read -d '' usage <<'EOF'
    ibur - Incremental Backups Using Rsync v. 0.03
Automates creation and rotation of incremental backups via rsync.

Usage: ibur [OPTION]... SOURCE DEST

Note: This version can only do local -> local and remote -> local backups.
Backing up to remote is easiest done by mounting remote with sshfs or similar.

Mandatory arguments to long options are mandatory for short options too.
  -h, --help               Show this help message.
  -n, --num-revisions=NUM  Number of revisions to be kept. The oldest backups
                             exceeding NUM will get deleted automatically.
                             Default: `0=inf'.
  -d, --no-default         Do not use the pre-set arguments passed to rsync;
                             `--archive'.
  -l, --no-logging         Disable automatic logging. Default is to log actions
                             and errors to `DEST/PREFIX.log'.
  -p, --prefix=PREFIX      Prefix backup directories and the log-file with
                             this. Default: `backup'. This also affects what
                             files are used for include and exclude -- see
                             `Additional Information'.
  -- ARG1 ARG2 ...         Separator for arguments supplied to rsync. All
                             arguments following this option are directly passed
                             to rsync. Useful for setting `--rsh' option to
                             rsync when SRC is remote.

Additional Information:
  - If no change at all is detected between current data and last made backup
    (`DEST/PREFIX_latest'), then no new backup is created.
  - rsync options
      `--exclude-from=DEST/PREFIX.exclude' and/or
      `--include-from=DEST/PREFIX.include'
    are automatically used if respective file exists.
  - Directory structure in DEST: one directory per backup;
    `PREFIX_YYYY-MM-DD_HH:MM' and symlink `PREFIX_latest' linking to latest
    backup.
  - Specifying how far back in time backups are to be kept cannot be done
    directly, only the number of backups can be specified. The frequency of
    backing up is specified when running cron.

Example Usage:
  `ibur /precious/files/ /backup/location/ -n 8 -- <extra commands to rsync>'
EOF


# PARSE COMMAND LINE ARGUMENTS
###############################

# Options that can get directly manipulated by command line arguments.
num_revisions=0
args_rsync_default=("--archive")
logging=true
prefix="backup"

# Process arguments with `getopt'.
args_parsed=$(getopt -o hn:dlp: -l help,num-revisions:,no-default,no-logging,prefix: -n ibur -- "$@") || \
{ echo "See '--help' for more information."; exit 1; }
eval set -- "$args_parsed"

while [ $# -gt 0 ]
do
    case "$1" in
        -h|--help)           echo "$usage"; exit 0;;
        -n|--num-revisions)  num_revisions="$2"; shift;;
      # -e|--rsh)            rsh="$2"; shift;;
        -d|--no-default)     args_rsync_default=();;
        -l|--no-logging)     logging=false;;
        -p|--prefix)         prefix="$2"; shift;;
        --)                  shift; break;;
        *)                   echo "Internal error, argument missmatch." >&2
                             exit 1;;
    esac
    shift
done

# that `-e' swich is for the future, disabled for now.
# -e, --rsh=COMMAND        Only for use when DEST is remote! Use this command to
#                            log in to the remote shell. This is used for
#                            maintaining backups (rotations etc.) This will NOT
#                            get passed to rsync, use `--' for additional rsync
#                            options. Also.. this is not yet implemented :)
#                            mount remote with sshfs or similar insted.


# All command line switches are now processed. Remaining arguments in `$@' are
# now SRC, DEST and arguments to be passed directly to rsync. The two first are
# always SRC and DEST.

# Check that SRC and DEST are specified.
if [ $# -lt 2 ]; then
    echo "SRC and DEST are not correctly specified.
See '--help' for more information." >&2
    exit 1
fi

# Preserve trailing slash from user input on $src. On $dest we ensure
# always trailing slash, thats the only thing that makes sense.

absolutize_path() {
    case "$1" in
        /*) path="$1" ;;
        *)  path="$(pwd)/$1" ;;
    esac
    echo "$(readlink -f "$path")"
}

src="$1"
dest="${2%/}"  # Ensure trailing slash.

src="$(absolutize_path "$src")"
dest="$(absolutize_path "$dest")"

# Ensure existence of $dest.
if [ ! -d "$dest" ]; then
    mkdir -p "$dest"
fi

# All arguments following are direct rsync options.
shift 2
args_rsync_user=("$@")

date="$(date +%Y-%m-%d_%H:%M)"

if $logging; then
    logfile="$dest/$prefix.log"
else
    logfile="/dev/null"
fi

# BUILD RSYNC ARGUMENTS
########################
args_rsync=("--link-dest=$dest/${prefix}_latest/"
            "$src"
            "$dest/${prefix}_$date_incomplete/"
            "${args_rsync_default[@]}"
            "${args_rsync_user[@]}")

# Use rsync with following options
#  --include-from=$dest/backup.include and/or
#  --exclude-from=$dest/backup.exclude
# if respective file exists.  --include must come first!
if [ -f "$dest/${prefix}.include" ]; then
    args_rsync+=("--include-from=$dest/${prefix}.include")
fi
if [ -f "$dest/${prefix}.exclude" ]; then
    args_rsync+=("--exclude-from=$dest/${prefix}.exclude")
fi


# BACKUP
#########

log() { # Helper function to output to logfile.
    echo "$(date '+%F %T') - $1" >> "$logfile"
}

standalone_backup() { # Plain and simple copy of SRC, used for first backup.
    log "\`${prefix}_latest' not found."
    # Run rsync without the '--link-dest' argument, it is the first
    # element in the arg array.
    rsync "${args_rsync[@]:1}"
    post_backup
    log "New backup created."
}

incremental_backup() { # The fun stuff, although trivial.
    # Do an rsync dry-run to check for diff between SRC and last made backup.
    changed=$(rsync --dry-run --out-format=%i "${args_rsync[@]}" | grep '>[^d]')
    # This is an empty string if no diff is found, in which case it tests
    # false. This is basically checking if anything that is not a directory is
    # to be transfered. (Dirs always get transfered, files can get hardlinked
    # instead, thus no transfer required.)  See manpage for rsync, section
    # '--itemize-changes' for more info on the output being parsed here.

    # If diff is detected, go on with the backup. If not, do nothing.
    if [ -n "$changed" ]; then
        rsync "${args_rsync[@]}"  # Backup will be called `${prefix}_$date_incomplete'.
        post_backup
        log "Incremental backup created."
        delete_old_backups
    else
        log "Up to date. No backup created."
    fi
}

post_backup() { # This is run after a backup has been created.
    # When the backup is complete we remove the `incomplete' indicator from the
    # name. Because we have minute resolution, backups being taken within the
    # same minute will replace each other. Doing backups this often is
    # pointless and thus not supported.
    rm -rf "$dest/${prefix}_$date"
    mv "$dest/${prefix}_$date_incomplete" "$dest/${prefix}_$date"
    # Update the `PREFIX_latest' symlink, point it to the newly created backup
    # with a relative path.
    ln -sf "${prefix}_$date" "$dest/${prefix}_latest"
}

delete_old_backups() {
        # Get a list of all backups created by this script. Ordered by oldest
        # first. Matches all files named
        # `${prefix}_201Y-MM-DD_HH:SS', the pattern used for matching is rather ugly:
        bkps=(${dest}/${prefix}_201[[:digit:]]-[[:digit:]][[:digit:]]-\
[[:digit:]][[:digit:]]_[[:digit:]][[:digit:]]:[[:digit:]][[:digit:]])
        # Now we filter out the old ones.
        # Let num_old_backups=0 if num_revisions < existing backups.
        if [ $num_revisions -le 0 ]; then # Never remove old backups if $num_revisions =< 0.
            num_old_backups=0
        elif [ ${#bkps[@]} -lt $num_revisions ]; then # We have no old backups.
            num_old_backups=0
        else
            num_old_backups=$[${#bkps[@]} - $num_revisions]
        fi
        # This assumes that $bkps are ordered with oldes first, does the pattern
        # matching ensure this? This is a potential bug!
        bkps_old=("${bkps[@]:0:$num_old_backups}")
        # Delete the old backups.
        for bkp in "${bkps_old[@]}"; do
            rm -rf "$bkp"
            log "Removed '$(basename "$bkp")'"
        done
}


main() {
    # Checks if there are any existing backups.
    if [[ ! -L "${dest}/${prefix}_latest" ]]; then
        standalone_backup
    else
        incremental_backup
    fi
    echo "-----------------------------------------------------------" >> "$logfile"
}

main
exit 0
